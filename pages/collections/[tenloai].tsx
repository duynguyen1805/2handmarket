import DanhMuc_1 from "@/components/Danhmuc_1";
import Footer from "@/components/Footer";
import Header from "@/components/Header";
import Product from "@/components/Product";
import {
  API_getAllProduct,
  API_getTypeSP_content,
} from "@/service/userService";
import { GetServerSideProps } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import left_back from "../../assets/icon/left-arrow.png";
import router from "next/router";
import Danhmuc from "@/components/Danhmuc";
import { motion } from "framer-motion";

interface LoaiSanPhamProps {
  tenloai: string;
}

const LoaiSanPham = ({ tenloai }: LoaiSanPhamProps) => {
  const [product, setProduct] = useState<any>();
  const [name, setName] = useState<string>();
  const [content, setContent] = useState<[]>();
  const [showFullContent, setShowFullContent] = useState(false);

  useEffect(() => {
    fetchDataProduct();
    // console.log("check query:", tenloai);
  }, []);
  const fetchDataProduct = async () => {
    try {
      const response = await API_getAllProduct(tenloai, 0);
      const response_content = await API_getTypeSP_content(tenloai);
      setProduct(response.Product);
      setName(response_content[0].name);
      setContent(response_content[0].content);
      console.log("check response: ", response_content);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };
  const goBack = () => {
    router.back();
  };
  const toggleContent = () => {
    setShowFullContent(!showFullContent);
  };

  return (
    <>
      <Head>
        <title>Chi tiết Phân bón</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="h-[100%] w-[100%] bg-gray-50 pt-3">
        <div
          className={`h-[50px] sm:w-[100%] lg:w-[75%] lg:mx-[13%] sm:p-1  md:p-5 border rounded-lg bg-white flex items-center text-lg`}
        >
          {/* <DanhMuc_1 /> */}
          <div className="h-[100%] w-[45px] flex items-center" onClick={goBack}>
            <Image
              src={left_back}
              alt="icon"
              className="h-[25px] w-[25px] cursor-pointer"
              // onClick={handleClickUser}
            />
          </div>
          <Danhmuc />
          <a
            href="/"
            className="ml-2 cursor-pointer hover:text-green-600 sm:text-base md:text-lg"
          >
            Trang chủ /
          </a>
          <p className="ml-2 sm:text-base md:text-lg">{name}</p>
        </div>
        <div className="h-auto lg:w-[75%] lg:mx-[13%] sm:w-[100%] md:w-[100%] mt-3 border rounded-lg bg-white">
          <div className="h-auto w-[100%] p-3">
            <p className="text-3xl sm:mb-2 md:mb-5">{name}</p>
            <motion.p
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0, transition: { duration: 1 } }}
              exit={{ opacity: 0 }}
              className={`sm:text-base md:text-lg ${
                showFullContent ? "" : "line-clamp-2"
              }`}
            >
              {content}
            </motion.p>
            {!showFullContent ? (
              <button className="text-blue-500 mb-2" onClick={toggleContent}>
                Xem thêm
              </button>
            ) : (
              <button className="text-blue-500 mb-2" onClick={toggleContent}>
                Ẩn bớt
              </button>
            )}
            <div className="h-[50px] flex items-center gap-4">
              <button className="h-[80%] w-[100px] border border-green-400 rounded-lg hover:text-green-600">
                Tăng dần
              </button>
              <button className="h-[80%] w-[100px] border border-green-400 rounded-lg hover:text-green-600">
                Giảm dần
              </button>
              <button className="h-[80%] w-[100px] border border-green-400 rounded-lg hover:text-green-600">
                Hàng mới
              </button>
            </div>
            <div className="h-auto w-[100%] pt-3 flex flex-wrap sm:gap-[0px] md:gap-[10px] sm:justify-center">
              {product &&
                product.map((item: any) => {
                  return <Product item={item} />;
                })}
            </div>
            <div className="h-[60px] w-[100%] flex items-center">
              <nav className="flex justify-between items-center ml-auto">
                <ul className="flex list-none gap-2">
                  <li className="w-[40px] h-[40px] rounded-full flex justify-center items-center border active ">
                    1
                  </li>
                  <li className="w-[40px] h-[40px] rounded-full flex justify-center items-center border">
                    2
                  </li>
                  <li className="w-[40px] h-[40px] rounded-full flex justify-center items-center border">
                    3
                  </li>
                  <li className="w-[40px] h-[40px] rounded-full flex justify-center items-center border">
                    ...
                  </li>
                  <li className="w-[40px] h-[40px] rounded-full flex justify-center items-center border">
                    5
                  </li>
                </ul>
              </nav>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export const getServerSideProps: GetServerSideProps<LoaiSanPhamProps> = async (
  context
) => {
  const { tenloai } = context.params as { tenloai: string };
  return {
    props: {
      tenloai: tenloai as string,
    },
  };
};

export default LoaiSanPham;
